"""
Django settings for pyerkdjango.django_project.

Generated by 'django-admin startproject' using Django 3.0.2.
(and manually adapted)

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

try:
    # this will be part of standard library for python >= 3.11
    import tomllib
except ModuleNotFoundError:
    import tomli as tomllib


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "79+i(fmz-9-aiztl(bd1=qm!c=g)nqnkc!&_j+d^==g+b7bo8!"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # to safely render HTML
    "django_bleach",
    # the example app
    "pyerkdjango.apps.MainAppConfig",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    # 'django.middleware.csrf.CsrfViewMiddleware',
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "pyerkdjango.django_project.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "pyerkdjango.django_project.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


TEST_RUNNER = "django_nose.NoseTestSuiteRunner"

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

# This is now true by default
# USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = "/static/"

SITE_ID = 1

BLEACH_ALLOWED_TAGS = [
    "p",
    "b",
    "i",
    "u",
    "em",
    "strong",
    "a",
    "br",
    "hr",
    "ul" "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "ul",
    "ol",
    "li",
    "pre",
    "code",
    "myscript",
    "table",
    "th",
    "tr",
    "td",
    "thead",
    "tbody",
    "div",
    "span",
]


def allow_attributes(tag, name, value):
    """
    Use callable to decide which attributes we allow.
    Background: "script" should only be allowed for type="math/tex".

    see also: https://bleach.readthedocs.io/en/latest/clean.html#allowed-tags-tags
    """
    if name in ["href", "title", "style"]:
        return True
    elif tag in ("span", "div", "li", "ul", "ol", "hr", "p") and name == "class":
        return True
    # elif tag == "script" and name == "type" and value.startswith("math/tex"):
    #     return True
    elif tag == "myscript":
        # Unfortunately, bleach checks every tag separately. To allow `<script type="application/json">
        # script has to be allowed in general. If the type-attribute does not match the rule then only
        # the attribute is stripped, leaving potential harmful code inside <script>.

        # Thus we introduce a fake tag `myscipt` which will be handled and checked by a custom filter
        return True
    else:
        return False


BLEACH_ALLOWED_ATTRIBUTES = allow_attributes
BLEACH_STRIP_TAGS = False
BLEACH_STRIP_COMMENTS = False

# Flag to determine if tests are running
RUNNING_TESTS = False


class LazyContainer:
    """
    some variables should be easily available as attribute of settings, however they depend on pyerk
    and during unittesting that module can only be loaded after os.environ["PYERK_BASE_DIR"] has been set.
    This class provides a workarround mechanism.
    """

    def __init__(self):
        self.store = {"initialized": False}

    def __getattr__(self, attrname: str):

        if attr := self.__dict__.get(attrname):
            return attr

        if not self.store["initialized"]:
            msg = "initialization of pyerk settings is incomplete"
            raise ValueError(msg)

        try:
            return self.store[attrname]
        except KeyError:
            msg = f"unknown attribute `{attrname}` for settings."
            raise AttributeError(msg)

    def initialize_pyerk_settings(self):
        import pyerk.settings
        self.store["DEFAULT_DATA_LANGUAGE"] = pyerk.settings.DEFAULT_DATA_LANGUAGE

        conf = pyerk.settings.CONF
        if not conf:
            msg = "`pyerk.settings.CONF` is empty, probably because env variable PYERK_BASE_DIR is empty or wrong"
            raise FileNotFoundError(msg)
        main_mod = conf["main_module"]

        self.store["ERK_DATA_MAIN_MOD_NAME"] = main_mod.rstrip(".py")
        self.store["ERK_DATA_MAIN_MOD"] = os.path.join(pyerk.settings.BASE_DIR, main_mod)
        self.store["ERK_DATA_MAIN_MOD_PREFIX"] = conf["main_module_prefix"]
        self.store["ERK_DATA_BASE_DIR"] = pyerk.settings.BASE_DIR

        self.store["initialized"] = True


LC = LazyContainer()
